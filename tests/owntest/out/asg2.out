GoatProgram [Procedure "p" [Prmt Val FloatType "n"] [] [Write (Id (Ident "n"))],Procedure "main" [] [Decl (IdentWithShape "a" [IntConst 5,IntConst 3]) IntType,Decl (Ident "b") IntType] [Assign (LId (IdentWithShape "a" [IntConst 5,IntConst 1])) (BinExpr Subtract (BinExpr Add (BinExpr Add (BinExpr Add (BinExpr Multiply (UnExpr Negative (IntConst 2)) (BinExpr Subtract (IntConst 1) (IntConst 10))) (IntConst 2)) (BinExpr Divide (IntConst 2) (IntConst 2))) (BinExpr Multiply (IntConst 14) (FloatConst 5.4))) (Id (Ident "i"))),IfThen (BinExpr Or (BinExpr And (BinExpr GreaterEqual (Id (Ident "a")) (IntConst 1)) (BinExpr LessEqual (Id (Ident "a")) (IntConst 3))) (BinExpr Greater (Id (Ident "a")) (IntConst 5))) [Assign (LId (Ident "a")) (IntConst 3)],While (BinExpr Greater (Id (Ident "n")) (IntConst 1)) [Call "p" [Id (IdentWithShape "n" [IntConst 2,IntConst 1])]],Write (Id (Ident "a")),Write (StrConst "\n"),Assign (LId (Ident "b")) (BinExpr Add (UnExpr Negative (Id (Ident "a"))) (Id (Ident "a"))),Write (Id (Ident "b")),Write (StrConst "\n")]]
proc p (val float n)
begin
    write n;
end

proc main ()
    int a[5, 3];
    int b;
begin
    a[5, 1] := ((((-2 * (1 - 10)) + 2) + (2 / 2)) + (14 * 5.4)) - i;
    if ((a >= 1) && (a <= 3)) || (a > 5) then
        a := 3;
    fi
    while n > 1 do
        call p(n[2, 1]);
    od
    write a;
    write "\n";
    b := -a + a;
    write b;
    write "\n";
end
