GoatProgram [Procedure "q" [Prmt Val FloatType "x",Prmt Ref IntType "k"] [Decl (Ident "n") IntType,Decl (Ident "y") FloatType,Decl (IdentWithShape "a" [IntConst 8]) BoolType] [Assign (LId (IdentWithShape "a_a" [IntConst 7])) (BoolConst True),Assign (LId (Ident "k'a")) (IntConst 42)],Procedure "p" [Prmt Ref IntType "i"] [] [Assign (LId (Ident "i")) (BinExpr Subtract (BinExpr Add (BinExpr Multiply (IntConst 6) (Id (Ident "i"))) (IntConst 4)) (Id (Ident "i")))],Procedure "main" [] [Decl (Ident "m") IntType] [Read (LId (Ident "n")),While (BinExpr Greater (Id (Ident "n")) (IntConst 1)) [Assign (LId (Ident "m")) (Id (Ident "n")),While (BinExpr Greater (Id (Ident "m")) (IntConst 0)) [IfThenElse (BinExpr Greater (Id (Ident "m")) (IntConst 0)) [Assign (LId (Ident "n")) (BinExpr Subtract (Id (Ident "n")) (IntConst 1)),Assign (LId (Ident "m")) (BinExpr Subtract (Id (Ident "m")) (IntConst 1)),Assign (LId (Ident "x")) (BinExpr Add (BinExpr Add (IntConst 1) (IntConst 2)) (IntConst 3)),Write (BinExpr Subtract (BinExpr Add (BinExpr Multiply (IntConst 3) (IntConst 7)) (IntConst 5)) (BinExpr Multiply (BinExpr Multiply (BinExpr Divide (IntConst 3) (IntConst 2)) (IntConst 12)) (Id (Ident "n")))),Write (StrConst "writing a string!\n"),Write (BinExpr Divide (BinExpr Multiply (IntConst 3) (BinExpr Subtract (IntConst 7) (IntConst 5))) (Id (Ident "a"))),IfThen (BinExpr Equal (Id (Ident "m")) (IntConst 0)) [Call "p" [Id (Ident "n")]]] [Assign (LId (Ident "m")) (BinExpr Subtract (Id (Ident "n")) (Id (Ident "m"))),Assign (LId (Ident "m")) (BinExpr Subtract (Id (Ident "m")) (IntConst 1))]]]]]
proc q (val float x, ref int k)
    int n;
    float y;
    bool a[8];
begin
    a_a[7] := true;
    k'a := 42;
end

proc p (ref int i)
begin
    i := ((6 * i) + 4) - i;
end

proc main ()
    int m;
begin
    read n;
    while n > 1 do
        m := n;
        while m > 0 do
            if m > 0 then
                n := n - 1;
                m := m - 1;
                x := (1 + 2) + 3;
                write ((3 * 7) + 5) - (((3 / 2) * 12) * n);
                write "writing a string!\n";
                write (3 * (7 - 5)) / a;
                if m = 0 then
                    call p(n);
                fi
            else
                m := n - m;
                m := m - 1;
            fi
        od
    od
end
